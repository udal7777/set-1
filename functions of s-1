import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Main {

    // Question 1: Count total number of negative numbers in an array
    public static void question1() {
        int[] arr = { -1, 2, -3, 4, -5 };
        int count = 0;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < 0) {
                count++;
            }
        }

        System.out.println("Total number of negative numbers: " + count);
    }

    // Question 2: Find max of 5 numbers entered by the user
    public static void question2() {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[5];
        System.out.println("Enter 5 integers: ");
        for (int i = 0; i < 5; i++) {
            arr[i] = sc.nextInt();
        }

        int max = arr[0];
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }

        System.out.println("Max number: " + max);
    }

    // Question 3: Merge two sorted arrays into a third sorted array
    public static void question3() {
        int[] arr1 = { 1, 3, 5, 7 };
        int[] arr2 = { 2, 4, 6, 8 };
        int n1 = arr1.length;
        int n2 = arr2.length;
        int[] arr3 = new int[n1 + n2];

        int i = 0, j = 0, k = 0;
        while (i < n1 && j < n2) {
            if (arr1[i] < arr2[j]) {
                arr3[k++] = arr1[i++];
            } else {
                arr3[k++] = arr2[j++];
            }
        }

        while (i < n1) {
            arr3[k++] = arr1[i++];
        }

        while (j < n2) {
            arr3[k++] = arr2[j++];
        }

        System.out.print("Merged array: ");
        for (int num : arr3) {
            System.out.print(num + " ");
        }
        System.out.println();
    }

    // Question 4: Reverse an array of 7 integers
    public static void question4() {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[7];
        System.out.println("Enter 7 integers: ");
        for (int i = 0; i < arr.length; i++) {
            arr[i] = sc.nextInt();
        }

        System.out.print("Reversed array: ");
        for (int i = arr.length - 1; i >= 0; i--) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    // Question 5: Check if an array is a palindrome
    public static void question5() {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[5];
        System.out.println("Enter 5 integers: ");
        for (int i = 0; i < arr.length; i++) {
            arr[i] = sc.nextInt();
        }

        boolean isPalindrome = true;
        for (int i = 0; i < arr.length / 2; i++) {
            if (arr[i] != arr[arr.length - i - 1]) {
                isPalindrome = false;
                break;
            }
        }

        if (isPalindrome) {
            System.out.println("The array is a palindrome.");
        } else {
            System.out.println("The array is not a palindrome.");
        }
    }

    // Question 6: Search for a number in an array and return its index
    public static void question6() {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[5];
        int searchElement, index = -1;

        System.out.println("Enter 5 integers: ");
        for (int i = 0; i < arr.length; i++) {
            arr[i] = sc.nextInt();
        }

        System.out.println("Enter the number to search: ");
        searchElement = sc.nextInt();

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == searchElement) {
                index = i;
                break;
            }
        }

        if (index == -1) {
            System.out.println("Number not found.");
        } else {
            System.out.println("Number found at index: " + index);
        }
    }

    // Question 7: Print all unique numbers in an array
    public static void question7() {
        int[] arr = { 1, 2, 2, 3, 4, 4, 5 };
        System.out.print("Unique numbers: ");
        for (int i = 0; i < arr.length; i++) {
            boolean isUnique = true;
            for (int j = 0; j < arr.length; j++) {
                if (i != j && arr[i] == arr[j]) {
                    isUnique = false;
                    break;
                }
            }
            if (isUnique) {
                System.out.print(arr[i] + " ");
            }
        }
        System.out.println();
    }

    // Question 8: Count the frequency of each number in an array
    public static void question8() {
        int[] arr = { 1, 2, 2, 3, 4, 4, 5 };
        Map<Integer, Integer> frequency = new HashMap<>();

        for (int num : arr) {
            frequency.put(num, frequency.getOrDefault(num, 0) + 1);
        }

        System.out.println("Frequency of numbers: ");
        for (Map.Entry<Integer, Integer> pair : frequency.entrySet()) {
            System.out.println(pair.getKey() + " occurs " + pair.getValue() + " times.");
        }
    }

    // Question 9: Count total number of duplicate numbers in an array
    public static void question9() {
        int[] arr = { 1, 2, 2, 3, 4, 4, 5 };
        Map<Integer, Integer> frequency = new HashMap<>();
        int duplicateCount = 0;

        for (int num : arr) {
            frequency.put(num, frequency.getOrDefault(num, 0) + 1);
        }

        for (Map.Entry<Integer, Integer> pair : frequency.entrySet()) {
            if (pair.getValue() > 1) {
                duplicateCount++;
            }
        }

        System.out.println("Total number of duplicate numbers: " + duplicateCount);
    }

    // Question 10: Print Parallelogram pattern
    public static void question10() {
        int rows = 5, cols = 5;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < i; j++) {
                System.out.print(" ");
            }
            for (int j = 0; j < cols; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }

    // Question 11: Print Right Triangle pattern
    public static void question11() {
        int rows = 5;
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }

    // Question 12: Print Half Diamond pattern
    public static void question12() {
        int cols = 5;
        for (int i = 1; i <= cols; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
        for (int i = cols - 1; i >= 1; i--) {
            for (int j = 1; j <= i; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }

    // Question 13: Print Diamond pattern
    public static void question13() {
        int rows = 9;
        if (rows % 2 == 0) {
            System.out.println("Error: Rows must be odd.");
            return;
        }

        int n = rows / 2;

        for (int i = 0; i <= n; i++) {
            for (int j = 0; j < n - i; j++) {
                System.out.print(" ");
            }
            for (int j = 0; j < 2 * i + 1; j++) {
                System.out.print("*");
            }
            System.out.println();
        }

        for (int i = n - 1; i >= 0; i--) {
            for (int j = 0; j < n - i; j++) {
                System.out.print(" ");
            }
            for (int j = 0; j < 2 * i + 1; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }

    // Question 14: Print alternating number pattern
    public static void question14() {
        int rows = 5, cols = 5;
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= cols; j++) {
                if ((i + j) % 2 == 0) {
                    System.out.print("1 ");
                } else {
                    System.out.print("0 ");
                }
            }
            System.out.println();
        }
    }

    // Question 15: Calculate the sum of 5 floating-point numbers
    public static void question15() {
        Scanner sc = new Scanner(System.in);
        double[] arr = new double[5];
        double sum = 0;

        System.out.println("Enter 5 floating-point numbers: ");
        for (int i = 0; i < 5; i++) {
            arr[i] = sc.nextDouble();
            sum += arr[i];
        }

        System.out.println("Sum of the numbers: " + sum);
    }

    public static void main(String[] args) {
        question1();
        question2();
        question3();
        question4();
        question5();
        question6();
        question7();
        question8();
        question9();
        question10();
        question11();
        question12();
        question13();
        question14();
        question15();
    }
}
